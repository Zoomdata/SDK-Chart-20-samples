{"templateId":"58b91e4ce4b0190a47ad48aa","templateType":"BLANK","name":"chartImportedFromGoogle-2-of-2","accountId":"58b91e4ce4b0190a47ad4825","enabled":false,"type":"CUSTOM","components":[{"id":"59274f29e4b0190a47ad4af2","name":"Visualization.js","type":"text/javascript","visualizationId":"59274f29e4b0190a47ad4af1","body":"/*\n * Copyright (C) Zoomdata, Inc. 2012-2017. All rights reserved.\n */\n\n/*\n * Sample Imported Chart\n *\n * This sample builds on chartImportedFromGoogle-2-of-1.\n *\n * The sample:\n *    1. Shows adding an additional selectable label to pick an\n *       additional chart variable, in this casem Metric.\n *    2. Shows using data accessors to identify group and metric\n *       currently selected.\n *    3. Shows using currently selected group and metric to populate\n *       data, whereas sample chartImportedFromGoogle-2-of-2 doesn't\n *       allow the user to select a metric variable.\n *    4. Use of data accessors to identify colors selected in the app or\n *       by API and use them for the chart\n * \n * Dependencies: loader.js, available from Google and linked in original sample\n * Source of imported chart: https://google-developers.appspot.com/chart/interactive/docs/gallery/piechart\n * \n */\n\n// Works with Grouped variables (remove if using UnGrouped)\n// Provides the metadata that Zoomdata app needs to render selectable\n// labels. These labels appear only in the Zoomdata application. They\n// do not appear if the chart is embedded in a custom application.\n\ncontroller.createAxisLabel({\n    picks: 'Group By', // Variable Name\n    orientation: 'horizontal',\n    position: 'bottom',\n    popoverTitle: 'Group'\n});\n\ncontroller.createAxisLabel({\n    picks: 'Metric', // Variable Name\n    orientation: 'horizontal',\n    position: 'bottom',\n    popoverTitle: 'Metric'\n});\n\n// controller.element stores the element where Zoomdata will\n// render the chart. controller.element should be treated as read-only.\n\nconsole.log(controller.element);\n\n\n// Google Charts loads specific chart packages at runtime.\n// This approach causes an issue of asynchronicity which we solve below\n// and in the controller.update() method.\n\nvar googleLoaded = false;\ngoogle.charts.load('current', {'packages':['corechart']});\n\ngoogle.charts.setOnLoadCallback( function() {\n    googleLoaded = true;\n});\n\n\n// Global variables to store current data and progress so that\n// we can access them in the event of a controller.resize() call.\n\nvar resizeData, resizeProgress;\n\n// Zoomdata calls this method whenever new data becomes available.\n// We will use it to transform our Zoomdata-provided data into the\n// format wanted by the Google charts and then to call the Google\n// chart rendering methods.\n\ncontroller.update = function(data, progress) {\n\n    // Stop update if Google chart package hasn't finished loading yet.\n    if (!googleLoaded) return;\n    \n    // Store current data and progress in the event of a resize\n    resizeData = data;\n    resizeProgress = progress;\n\n    // Reshape our data to fit the format that Google charts wants:\n    // two columns - one for the pie slices and one for the slice data\n    var dataForGoogleChart = [];\n    dataForGoogleChart.push([\"wedge\",\"quantity\"]);\n\n    // Identify the chart variable used for grouping\n    var groupsList = controller.dataAccessors.getDimensionAccessors();\n    var theGroup;\n    for (var group in groupsList[0]) {\n        theGroup = group;\n    }\n    var groupAccessor = controller.dataAccessors[theGroup];\n    \n    // Identify the chart variable used for metric value\n    var metricsList = controller.dataAccessors.getMetricAccessors();\n    var theMetric;\n    for (var metric in metricsList[0]) {\n        theMetric = metric;\n    }\n    var metricAccessor = controller.dataAccessors[theMetric];\n    \n    // Build from our data the table that the Google chart library expects \n    data.forEach( function(datum) {\n        var metricName;\n        var groupName = groupAccessor.raw(datum);\n        \n        // Google charts don't convert null value to string, so we must        \n        var row = [\n                    groupName !== null ? groupName : \"null / unknown\",\n                    metricAccessor.raw(datum)\n        ];\n        dataForGoogleChart.push(row);\n    });\n    \n    // Feed our reshaped data to Google's transform to get Google's\n    // internal format\n    var googledData = google.visualization.arrayToDataTable(dataForGoogleChart);\n        \n    // Identify our currently selected color accessor; we happen to know\n    // that it's the group accessor, but that is not necessarily true.\n    var theDataAccessors = controller.dataAccessors;\n    var theColorAccessor;\n    for (var accessor in theDataAccessors) {\n        if (controller.dataAccessors[accessor].isColor) {\n            theColorAccessor = controller.dataAccessors[accessor];\n        }\n    }\n\n    // Set our Google chart formatting options\n    var options = {\n        // use the color set selected by the user\n        colors: theColorAccessor.getColorRange(),\n        pieSliceTextStyle: {\n            color: 'black',\n        }\n    };    \n\n    // Create the chart    \n    var theGoogleChart = new google.visualization.PieChart(controller.element);\n\n    // Render the chart\n    theGoogleChart.draw(googledData, options);\n};\n\n// Called when the widget is resized\ncontroller.resize = function(width, height, size) {\n    \n    // use the global variables to reload the same existing data\n    controller.update(resizeData, resizeProgress);\n};","order":0,"uploadDate":"2017-03-02 16:36:53.000","path":"/js/visualizations/templates/BLANK/Visualization.js"},{"id":"59274f29e4b0190a47ad4af3","name":"style.css","type":"text/css","visualizationId":"59274f29e4b0190a47ad4af1","body":"/**\n * Copyright (C) Zoomdata, Inc. 2012-2017. All rights reserved.\n */\n.small text {\n    font-size:10px;\n}\n\n.medium text {\n    font-size: 12px;\n}\n\n.large text {\n    font-size:14px;\n}","order":1,"uploadDate":"2017-03-02 16:36:53.000","path":"/js/visualizations/templates/BLANK/style.css"}],"libs":["lodash.min.js","loader.js"],"objectFieldTypes":["TIME","NUMBER","MONEY","ATTRIBUTE","INTEGER"],"controls":["UberStyle","DirtyDataIndicator","Color","FiltersIndicator","Undo","Info","TimePlayer","Filters","Defaults","Bookmark","Zoom","NoDataIndicator","TimeTable","Share","Download"],"variables":[{"name":"Chart Description","type":"string","descr":"","defaultValue":"","colorMetric":false,"colorNumb":0,"required":false},{"name":"Chart Name","type":"string","descr":"","defaultValue":"","colorMetric":false,"colorNumb":0,"required":false},{"name":"Metric","type":"metric","descr":"","attributeType":["MONEY","INTEGER","NUMBER"],"defaultValue":[{"name":"count"}],"colorMetric":false,"colorNumb":0,"metricType":"general","legendType":"range","colors":[],"colorSet":"Accent","required":false},{"name":"Group By","type":"group","descr":"","attributeType":["ATTRIBUTE"],"defaultValue":"","colorMetric":false,"colorNumb":5,"colors":[{"name":"Color 1","color":"#1b9e77"},{"name":"Color 2","color":"#d95f02"},{"name":"Color 3","color":"#7570b3"},{"name":"Color 4","color":"#e7298a"},{"name":"Color 5","color":"#66a61e"}],"config":{"colorGroupIndex":0,"groupColorSet":"Dark2"},"required":false}]}