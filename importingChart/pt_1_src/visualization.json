{"templateId":"569819cf60b23160031f5dec","templateType":"BLANK","name":"chartImportedFromGoogle-pt-1-of-2","accountId":"5893600560b23eaaf2fcb926","enabled":false,"type":"CUSTOM","components":[{"id":"58bf4d2460b207bc4c0a629b","name":"Visualization.js","type":"text/javascript","visualizationId":"58bf4d2460b207bc4c0a629a","body":"/*\n * Copyright (C) Zoomdata, Inc. 2012-2017. All rights reserved.\n */\n\n/*\n * Sample Imported Chart\n *\n * This sample shows the importation of a chart from an third-party\n * library. In this case, the chart come from Google Charts. This sample\n * the first of two (1 of 2).\n *\n * The sample illustrates:\n *    1. Data transformation from the format provided\n *       by Zoomdata to the controller.update() method to\n *       the format expected by the Google chart\n *    2. The use of controller.update() to invoke chart\n *       rendering rather than using the trigger expected\n *       by the third party library\n *    3. The use of controller.element to identify the designated\n *       DOM element for rendering\n *    4. Simple handling of an asynchronicity problem that arises\n *       because the Google chart library loads at runtime\n *    5. Simple handling of DOM element resizing\n * \n * Dependencies: loader.js, available from Google and linked in original sample\n * Source of imported chart: https://google-developers.appspot.com/chart/interactive/docs/gallery/piechart\n * \n * The second sample will show the use of color dataAccessors to\n * coordinate colors based on user selections.\n */\n\n// Works with Grouped variables (remove if using UnGrouped)\n// Provides the metadata that Zoomdata app needs to render selectable\n// labels. These labels appear only in the Zoomdata application. They\n// do not appear if the chart is embedded in a custom application.\n\ncontroller.createAxisLabel({\n    picks: 'Group By', // Variable Name\n    orientation: 'horizontal',\n    position: 'bottom',\n    popoverTitle: 'Group'\n});\n\n// controller.element stores the element where Zoomdata will\n// render the chart. controller.element should be treated as read-only.\n\nconsole.log(controller.element);\n\n\n// Google Charts loads specific chart packages at runtime.\n// This approach causes an issue of asynchronicity which we solve below\n// and in the controller.update() method.\n\nvar googleLoaded = false;\ngoogle.charts.load('current', {'packages':['corechart']});\n\ngoogle.charts.setOnLoadCallback( function() {\n    googleLoaded = true;\n});\n\n\n// Global variables to store current data and progress so that\n// we can access them in the event of a controller.resize() call.\n\nvar resizeData, resizeProgress;\n\n\n// Zoomdata calls this method whenever new data becomes available.\n// We will use it to transform our Zoomdata-provided data into the\n// format wanted by the Google charts and then to call the Google\n// chart rendering methods.\n\ncontroller.update = function(data, progress) {\n\n    // Stop update if Google chart package hasn't finished loading yet.\n    \n    if (!googleLoaded) return;\n    \n    // Store current data and progress in the event of a resize\n    \n    resizeData = data;\n    resizeProgress = progress;\n\n    // Reshape our data to fit the format that Google charts wants:\n    // two columns - one for the pie slices and one for the slice data\n\n    var dataForGoogleChart = [];\n    dataForGoogleChart.push([\"wedge\",\"quantity\"]);\n    \n    data.forEach( function(datum) {\n        var row = [datum.group[0],datum.current.count];\n        dataForGoogleChart.push(row);\n    });\n    \n    // Feed our reshaped data to Google's transform to get Google's\n    // internal format\n\n    var googledData = google.visualization.arrayToDataTable(dataForGoogleChart);\n    \n    // Set our Google chart formatting options\n\n    var options = {\n        colors: ['red','green','blue'],\n        pieSliceTextStyle: {\n            color: 'black',\n        }\n    };    \n\n    // Create the chart    \n\n    var theGoogleChart = new google.visualization.PieChart(controller.element);\n\n    // Render the chart\n\n    theGoogleChart.draw(googledData, options);\n};\n\n// Called when the widget is resized\n\ncontroller.resize = function(width, height, size) {\n    \n    // use the global variables to reload the same existing data\n    \n    controller.update(resizeData, resizeProgress);\n};\n","order":0,"uploadDate":"2017-03-19 12:08:59.187"},{"id":"58bf4d2460b207bc4c0a629c","name":"style.css","type":"text/css","visualizationId":"58bf4d2460b207bc4c0a629a","body":"/**\n * Copyright (C) Zoomdata, Inc. 2012-2017. All rights reserved.\n */\n.small text {\n    font-size:10px;\n}\n\n.medium text {\n    font-size: 12px;\n}\n\n.large text {\n    font-size:24px;\n}","order":1,"uploadDate":"2017-03-19 12:08:59.187"}],"libs":["loader.js","lodash.min.js"],"objectFieldTypes":["TIME","NUMBER","MONEY","ATTRIBUTE","INTEGER"],"controls":["TimeControl","UberStyle","DirtyDataIndicator","FiltersIndicator","Undo","Info","TimePlayer","Filters","Defaults","Bookmark","Zoom","NoDataIndicator","TimeTable","Share","Download"],
  "variables":
  [{"name":"Group By","type":"group","descr":"","attributeType":["ATTRIBUTE"],"defaultValue":"","colorMetric":false,"colorNumb":0,"groupType":"attribute","required":false},
    {"name":"Chart Name","type":"string","descr":"","defaultValue":"","colorMetric":false,"colorNumb":0,"required":false},
    {"name":"Chart Description","type":"string","descr":"","defaultValue":"","colorMetric":false,"colorNumb":0,"required":false},
    {"name":"Metric","type":"metric","descr":"","attributeType":["MONEY","INTEGER","NUMBER"],"defaultValue":[{"name":"count"}],"colorMetric":false,"colorNumb":0,"metricType":"general","legendType":"range","colors":[],"colorSet":"Accent","required":false}]}